{"version":3,"sources":["components/Header.js","components/Form.js","helpers.js","components/Mensaje.js","components/Resultado.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","Form","props","cantidad","guardarCantidad","plazo","guardarPlazo","guardarTotal","guardarCargando","useState","error","guardarError","onSubmit","e","preventDefault","setTimeout","total","totalCantidad","totalPlazo","calcularTotal","className","type","placeholder","onChange","parseInt","target","value","Mensaje","Resultado","toFixed","Spinner","App","cargando","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.30198fc7.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nfunction Header({ title }) {\n    // Se puede colocar código standard de JS fuera del return.\n    // Se puede aplicar destructuring a los props.\n    return(\n        <Fragment>\n            <h1>{ title }</h1> {/* JSX permite mezclar HTML con JS. Lo que está en\n            llaves, es JS. */}\n        </Fragment>\n        \n    );\n}\n\n/* En la versión anterior de React, los componentes eran clases. Ahora son funciones.\nPara crearlas, se puede utilizar fuction declaration (function expression).\nEl beneficio de este tipo de sintáxis, es que el return está implítico.\nSi se da implícito el return, no se puede seguir agregando código JS (no hay dónde colocarlo).\nconst Header = ({ title }) => (\n    <h1>{ title }</h1> \n); */\n\nexport default Header;","import React, { Fragment, useState } from 'react';\nimport { calcularTotal } from '../helpers.js';\n\nconst Form = (props) => {\n    const { \n        cantidad, \n        guardarCantidad, \n        plazo, \n        guardarPlazo,\n        guardarTotal,\n        guardarCargando,\n    } = props;\n\n    /* Lo que hace que las aplicaciones de React sean rápidas, es el state.\n    useState retorna dos valores: Una variable que contiene el valor y una función\n    para iteractuar con el state.\n    En React, los datos flujen el padre al hijo; nunca del hijo al padre. */\n    const [ error, guardarError ] = useState(false);\n\n    const handleChange = (e) => {\n        guardarCantidad(parseInt(e.target.value));\n    }\n    \n    const handleChangeSelect = (e) => {\n        guardarPlazo(parseInt(e.target.value));\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(cantidad === 0 || plazo === '') {\n            guardarError(true);\n            return;\n        }\n\n        guardarError(false);\n\n        guardarCargando(true);\n\n        setTimeout(() => {\n\n            /* Helpers: Un archivo de funciones que se pueden importar. */\n            const total = calcularTotal(cantidad, plazo);\n            \n            guardarTotal(total);\n\n            guardarCargando(false);\n        }, 3000);\n\n    }\n\n    return (\n        <Fragment>\n            <form \n                onSubmit={ handleSubmit }\n            >\n                <div className=\"row\">\n                    <div>\n                        <label>Cantidad préstamo</label>\n                        <input \n                            className=\"u-full-width\" \n                            type=\"number\" \n                            placeholder=\"Ejemplo: 3000\"\n                            onChange={ handleChange }\n                        />{ /* Los eventos tienen un on adelante. En React, se recomienda poner\n                        un handler. */ }\n                    </div>\n                    <div>\n                        <label>Plazo para pagar</label>\n                        <select \n                            className=\"u-full-width\"\n                            onChange={ handleChangeSelect }\n                        >\n                            <option value=\"\">Seleccionar</option>\n                            <option value=\"3\">3 meses</option>\n                            <option value=\"6\">6 meses</option>\n                            <option value=\"12\">12 meses</option>\n                            <option value=\"24\">24 meses</option>\n                        </select>\n                    </div>\n                    <div>\n                        <input \n                            type=\"submit\" \n                            value=\"Calcular\" \n                            className=\"button-primary u-full-width\" \n                        />\n                    </div>\n                </div>\n            </form>\n\n            {\n                error \n                ? <p className=\"error\">Todos los campos son obligatorios.</p> \n                : null\n            }\n        </Fragment>\n    );\n}\n \nexport default Form;","export function calcularTotal(cantidad, plazo) {\n    let totalCantidad;\n    let totalPlazo = 0;\n\n    if(cantidad <= 1000) {\n        totalCantidad = cantidad * .25;\n    } else if(cantidad > 1000 && cantidad <= 5000) {\n        totalCantidad = cantidad * .20;\n    } else if(cantidad > 5000 && cantidad <= 10000) {\n        totalCantidad = cantidad * .15;\n    } else {\n        totalCantidad = cantidad * .10;\n    }\n\n    switch(plazo) {\n        case 3: \n            totalPlazo = cantidad * 0.05;\n            break;\n        case 6: \n            totalPlazo = cantidad * 0.10;\n            break;\n        case 12: \n            totalPlazo = cantidad * 0.15;\n            break;\n        case 24: \n            totalPlazo = cantidad * 0.20;\n            break;\n        default:\n            break;\n    }\n\n    return totalPlazo + totalCantidad + cantidad;\n}","import React from 'react';\n\nconst Mensaje = () => (  \n    <p>Agrega una cantidad y plazo a pagar.</p>\n);\n\nexport default Mensaje;","import React from 'react';\n\nconst Resultado = ({ total, plazo, cantidad }) => ( \n    <div className=\"u-full-width resultado\">\n        <h2>Resumen</h2>\n        <p>La cantidad solicitada es ${ cantidad } a pagar en { plazo } meses.</p>\n        <p>Su cuota mensual será de ${ (total / plazo).toFixed(2) }.</p>\n        <p>El total a pagar es de ${ (total).toFixed(2) }.</p>\n    </div> \n);\n\n \nexport default Resultado;","import React from 'react';\nimport './css/Spinner.css';\n\nconst Spinner = () => {\n    return ( \n        <div className=\"sk-chase\">\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n        </div> \n    );\n}\n \nexport default Spinner;","import React, { Fragment, useState } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Mensaje from './components/Mensaje';\nimport Resultado from './components/Resultado';\nimport Spinner from './components/Spinner';\n\nfunction App() {\n  const [ cantidad, guardarCantidad ] = useState(0);\n  const [ plazo, guardarPlazo ] = useState('');\n  const [ total, guardarTotal ] = useState(0);\n  const [ cargando, guardarCargando ] = useState(false);\n\n  return (\n    <Fragment>\n      <Header \n        title=\"Cotizador de préstamos\" // Puede ser cualquier tipo de dato.\n      />\n\n      <div className=\"container\">\n        <Form \n          cantidad = { cantidad }\n          guardarCantidad = { guardarCantidad }\n          plazo = { plazo }\n          guardarPlazo = { guardarPlazo }\n          guardarTotal = { guardarTotal }\n          guardarCargando = { guardarCargando }\n        />\n        \n        <div className=\"mensajes\">\n          { \n            cargando \n              ? <Spinner />\n              : (total === 0) \n              ? <Mensaje />\n              : <Resultado \n                  total = { total }\n                  plazo = { plazo }\n                  cantidad = { cantidad }\n                />\n          } \n        </div>\n      </div>\n    </Fragment>\n  ); /* Cuando se tiene un return, siempre hay que tener un elemento que contenga a los\n  demás. Si no se quiere colocar elementos extra, se importa Fragment. \n  Un fragment es como un div, pero no va a mostrarse en el front end. */\n} /* En React, los datos fluyen de los componentes padres a los hijos. */\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}